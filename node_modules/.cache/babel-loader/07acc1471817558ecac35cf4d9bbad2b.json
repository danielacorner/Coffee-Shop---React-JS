{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shanic\\\\Desktop\\\\my-coffee-shop\\\\src\\\\context.js\";\nimport React from \"react\";\nimport { coffeeList, detailProduct } from \"./data\";\nconst ProductContext = React.createContext();\n\nclass ProductProvider extends React.Component {\n  constructor() {\n    super();\n\n    this.setProducts = () => {\n      let tempProducts = [];\n      coffeeList.forEach(item => {\n        const singleItem = { ...item\n        };\n        tempProducts = [...tempProducts, singleItem];\n      });\n      this.setState(() => {\n        return {\n          products: tempProducts\n        };\n      });\n    };\n\n    this.getItem = id => {\n      const product = this.state.products.find(item => item.id === id);\n      return product;\n    };\n\n    this.addToCart = id => {\n      let tempProducts = [...this.state.products];\n      const index = tempProducts.indexOf(this.getItem(id));\n      const product = tempProducts[index];\n      product.inCart = true;\n      product.count = 1;\n      this.setState(() => {\n        return {\n          products: tempProducts,\n          cart: [...this.state.cart, product]\n        };\n      }, () => {\n        console.log(this.state);\n      });\n    };\n\n    this.openModal = id => {\n      const product = this.getItem(id);\n      this.setState(() => {\n        return {\n          modalProduct: product,\n          show: true\n        };\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState(() => {\n        return {\n          show: false\n        };\n      });\n    };\n\n    this.increment = id => {\n      //temp cart values\n      let tempCart = [...this.state.cart]; //finding the product the client selected in the cart (pressed on the + sign)\n\n      const selectedProduct = tempCart.find(item => item.id === id); //We need to find the item specific index\n\n      const index = tempCart.indexOf(selectedProduct);\n      const product = tempCart[index];\n      product.count = product.count + 1;\n      product.total = product.count * product.price;\n      this.setState(() => {\n        return {\n          cart: [...tempCart]\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.decrement = id => {\n      //temp cart values\n      let tempCart = [...this.state.cart]; //finding the product the client selected in the cart (pressed on the + sign)\n\n      const selectedProduct = tempCart.find(item => item.id === id); //We need to find the item specific index\n\n      const index = tempCart.indexOf(selectedProduct);\n      const product = tempCart[index];\n      product.count = product.count - 1;\n\n      if (product.count === 0) {\n        this.removeItem(id);\n      } else {\n        product.total = product.count * product.price;\n      }\n\n      this.setState(() => {\n        return {\n          cart: [...tempCart]\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.removeItem = id => {\n      let tempProducts = [...this.state.products];\n      let tempCart = [...this.state.cart];\n      tempCart = tempCart.filter(item => item.id !== id);\n      const index = tempProducts.indexOf(this.getItem(id));\n      let removeProduct = tempProducts[index];\n      removeProduct.inCart = false;\n      removeProduct.count = 0;\n      removeProduct.total = 0;\n      this.setState(() => {\n        return {\n          cart: [...tempCart],\n          products: [...tempProducts]\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.clearCart = id => {\n      this.setState(() => {\n        return {\n          cart: []\n        };\n      }, () => {\n        this.setProducts();\n        this.addTotals();\n      });\n    };\n\n    this.addTotals = () => {\n      let subTotal = 0;\n      this.state.cart.map(item => subTotal += item.total);\n      const tempTax = subTotal * 0.13;\n      const tax = parseFloat(tempTax.toFixed(2));\n      const total = subTotal + tax;\n      this.setState(() => {\n        return {\n          crartSubTotal: subTotal,\n          cartTax: tax,\n          cartTotal: total\n        };\n      });\n    };\n\n    this.state = {\n      products: coffeeList,\n      show: false,\n      modalProduct: detailProduct,\n      size: \"\",\n      milk: \"\",\n      sweet: \"\",\n      cart: [],\n      cartSubTotal: 0,\n      cartTax: 0,\n      cartTotal: 0\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  componentDidMount() {\n    this.setProducts();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ProductContext.Provider, {\n      value: { ...this.state,\n        handleDetail: this.handleDetail,\n        addToCart: this.addToCart,\n        openModal: this.openModal,\n        closeModal: this.closeModal,\n        increment: this.increment,\n        decrement: this.decrement,\n        removeItem: this.removeItem,\n        clearCart: this.clearCart\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 7\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst ProductConsumer = ProductContext.Consumer;\nexport { ProductProvider, ProductConsumer };","map":{"version":3,"sources":["C:/Users/shanic/Desktop/my-coffee-shop/src/context.js"],"names":["React","coffeeList","detailProduct","ProductContext","createContext","ProductProvider","Component","constructor","setProducts","tempProducts","forEach","item","singleItem","setState","products","getItem","id","product","state","find","addToCart","index","indexOf","inCart","count","cart","console","log","openModal","modalProduct","show","closeModal","increment","tempCart","selectedProduct","total","price","addTotals","decrement","removeItem","filter","removeProduct","clearCart","subTotal","map","tempTax","tax","parseFloat","toFixed","crartSubTotal","cartTax","cartTotal","size","milk","sweet","cartSubTotal","handleChange","bind","event","name","value","target","componentDidMount","render","handleDetail","props","children","ProductConsumer","Consumer"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { coffeeList, detailProduct } from \"./data\";\r\n\r\nconst ProductContext = React.createContext();\r\n\r\nclass ProductProvider extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      products: coffeeList,\r\n      show: false,\r\n      modalProduct: detailProduct,\r\n      size: \"\",\r\n      milk: \"\",\r\n      sweet: \"\",\r\n      cart: [],\r\n      cartSubTotal: 0,\r\n      cartTax: 0,\r\n      cartTotal: 0,\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setProducts();\r\n  }\r\n\r\n  setProducts = () => {\r\n    let tempProducts = [];\r\n    coffeeList.forEach((item) => {\r\n      const singleItem = { ...item };\r\n      tempProducts = [...tempProducts, singleItem];\r\n    });\r\n    this.setState(() => {\r\n      return { products: tempProducts };\r\n    });\r\n  };\r\n\r\n  getItem = (id) => {\r\n    const product = this.state.products.find((item) => item.id === id);\r\n    return product;\r\n  };\r\n\r\n  addToCart = (id) => {\r\n    let tempProducts = [...this.state.products];\r\n    const index = tempProducts.indexOf(this.getItem(id));\r\n    const product = tempProducts[index];\r\n    product.inCart = true;\r\n    product.count = 1;\r\n    this.setState(\r\n      () => {\r\n        return { products: tempProducts, cart: [...this.state.cart, product] };\r\n      },\r\n      () => {\r\n        console.log(this.state);\r\n      }\r\n    );\r\n  };\r\n\r\n  openModal = (id) => {\r\n    const product = this.getItem(id);\r\n    this.setState(() => {\r\n      return { modalProduct: product, show: true };\r\n    });\r\n  };\r\n\r\n  closeModal = () => {\r\n    this.setState(() => {\r\n      return { show: false };\r\n    });\r\n  };\r\n\r\n  increment = (id) => {\r\n    //temp cart values\r\n    let tempCart = [...this.state.cart];\r\n    //finding the product the client selected in the cart (pressed on the + sign)\r\n    const selectedProduct = tempCart.find((item) => item.id === id);\r\n    //We need to find the item specific index\r\n    const index = tempCart.indexOf(selectedProduct);\r\n    const product = tempCart[index];\r\n\r\n    product.count = product.count + 1;\r\n    product.total = product.count * product.price;\r\n\r\n    this.setState(\r\n      () => {\r\n        return { cart: [...tempCart] };\r\n      },\r\n      () => {\r\n        this.addTotals();\r\n      }\r\n    );\r\n  };\r\n\r\n  decrement = (id) => {\r\n    //temp cart values\r\n    let tempCart = [...this.state.cart];\r\n    //finding the product the client selected in the cart (pressed on the + sign)\r\n    const selectedProduct = tempCart.find((item) => item.id === id);\r\n    //We need to find the item specific index\r\n    const index = tempCart.indexOf(selectedProduct);\r\n    const product = tempCart[index];\r\n    product.count = product.count - 1;\r\n\r\n    if (product.count === 0) {\r\n      this.removeItem(id);\r\n    } else {\r\n      product.total = product.count * product.price;\r\n    }\r\n    this.setState(\r\n      () => {\r\n        return { cart: [...tempCart] };\r\n      },\r\n      () => {\r\n        this.addTotals();\r\n      }\r\n    );\r\n  };\r\n\r\n  removeItem = (id) => {\r\n    let tempProducts = [...this.state.products];\r\n    let tempCart = [...this.state.cart];\r\n\r\n    tempCart = tempCart.filter((item) => item.id !== id);\r\n    const index = tempProducts.indexOf(this.getItem(id));\r\n    let removeProduct = tempProducts[index];\r\n    removeProduct.inCart = false;\r\n    removeProduct.count = 0;\r\n    removeProduct.total = 0;\r\n\r\n    this.setState(\r\n      () => {\r\n        return {\r\n          cart: [...tempCart],\r\n          products: [...tempProducts],\r\n        };\r\n      },\r\n      () => {\r\n        this.addTotals();\r\n      }\r\n    );\r\n  };\r\n\r\n  clearCart = (id) => {\r\n    this.setState(\r\n      () => {\r\n        return { cart: [] };\r\n      },\r\n      () => {\r\n        this.setProducts();\r\n        this.addTotals();\r\n      }\r\n    );\r\n  };\r\n\r\n  addTotals = () => {\r\n    let subTotal = 0;\r\n    this.state.cart.map((item) => (subTotal += item.total));\r\n    const tempTax = subTotal * 0.13;\r\n    const tax = parseFloat(tempTax.toFixed(2));\r\n    const total = subTotal + tax;\r\n    this.setState(() => {\r\n      return {\r\n        crartSubTotal: subTotal,\r\n        cartTax: tax,\r\n        cartTotal: total,\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <ProductContext.Provider\r\n        value={{\r\n          ...this.state,\r\n          handleDetail: this.handleDetail,\r\n          addToCart: this.addToCart,\r\n          openModal: this.openModal,\r\n          closeModal: this.closeModal,\r\n          increment: this.increment,\r\n          decrement: this.decrement,\r\n          removeItem: this.removeItem,\r\n          clearCart: this.clearCart,\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </ProductContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nconst ProductConsumer = ProductContext.Consumer;\r\n\r\nexport { ProductProvider, ProductConsumer };\r\n"]},"metadata":{},"sourceType":"module"}